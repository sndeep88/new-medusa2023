import { Logger } from "@medusajs/medusa";
import { AwilixContainer } from "awilix";
import { SystemConfigService } from "../services/system-config";
import { ConfigType, DataType, ProviderType } from "../models/system-config";

const defaultConfigs = [
	{
		type: ConfigType.Payment,
		provider: ProviderType.MPAY,
		key: "mpay_url",
		key_name: "MyUser API Url",
		key_description: "MyUser API Url for MPay",
		required: true,
		value: "https://api.myuser.com/pay/v1",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.MPAY,
		key: "mpay_privateKey",
		key_name: "Private Key",
		key_description: "Private Key for MPay",
		required: true,
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.MPAY,
		key: "mpay_publicKey",
		key_name: "Public Key",
		key_description: "Public Key for MPay",
		required: true,
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.MPAY,
		key: "mpay_connection-token",
		key_name: "Connection token",
		key_description: "Connection token for payment in MPay",
		required: false,
		value: "3a1_asdasiqwenqsasodasd",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.MPAY,
		key: "mpay_ipAddress",
		key_name: "IP Address",
		key_description: "IP Address for payment in MPay",
		required: true,
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.MPAY,
		key: "mpay_implementDirect",
		key_name: "Use Direct implement",
		key_description: "MPay implement by inline or direct",
		required: true,
		value: "true",
		dataType: "boolean",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.STRIPE,
		key: "stripe_secretKey",
		key_name: "Secret Key",
		key_description: "Secret Key for Stripe",
		required: true,
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.STRIPE,
		key: "stripe_publicKey",
		key_name: "Public Key",
		key_description: "Public Key for Stripe",
		required: true,
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.STRIPE,
		key: "stripe_webhookId",
		key_name: "Webhook ID",
		key_description: "Stripe's webhook ID",
		required: true,
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.STRIPE,
		key: "stripe_webhookSecret",
		key_name: "Webhook Secret",
		key_description: "Webhook Secret for Stripe",
		required: true,
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Email,
		provider: ProviderType.MAILGUN,
		required: false,
		key: "mailgun_private-apiKey",
		key_name: "Private API Key",
		key_description: "Private API Key for Mailgun",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Email,
		provider: ProviderType.MAILGUN,
		required: false,
		key: "mailgun_public-apiKey",
		key_name: "Public API Key",
		key_description: "Public API Key for Mailgun",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Email,
		provider: ProviderType.MAILGUN,
		required: false,
		key: "mailgun_webhook-key",
		key_name: "HTTP Webhook signing key",
		key_description: "HTTP Webhook signing key for Mailgun",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Email,
		provider: ProviderType.MAILGUN,
		required: false,
		key: "mailgun_domain",
		key_name: "Mailgun Domain",
		key_description: "Mailgun Domain for sending emails",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Sms,
		provider: ProviderType.TEXTGRID,
		required: false,
		key: "textgrid_service-host",
		key_name: "Textgrid API host",
		key_description: "Textgrid API host for sending SMS",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Sms,
		provider: ProviderType.TEXTGRID,
		required: false,
		key: "textgrid_fromNumber",
		key_name: "Sending number",
		key_description: "Sending number for Textgrid",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Sms,
		provider: ProviderType.TEXTGRID,
		required: false,
		key: "textgrid_accountSID",
		key_name: "Account SID",
		key_description: "Account SID for Textgrid",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Sms,
		provider: ProviderType.TEXTGRID,
		required: false,
		key: "textgrid_authToken",
		key_name: "Auth Token",
		key_description: "Auth Token for Textgrid",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Sms,
		provider: ProviderType.TEXTGRID,
		required: false,
		key: "textgrid_webhook-secret",
		key_name: "Webhook Secret",
		key_description: "Webhook Secret for Textgrid",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.GoogleApi,
		provider: ProviderType.GOOGLE,
		required: false,
		key: "google_api-key",
		key_name: "API Key",
		key_description: "API Key of Google Map API for places library",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.SQUARE,
		require: true,
		key: "square_accessToken",
		key_name: "Access Token",
		key_description: "Access Token for Square",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.SQUARE,
		require: true,
		key: "square_environment",
		key_name: "Environment",
		key_description: "Environment for Square",
		value: "sandbox",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.SQUARE,
		require: true,
		key: "square_applicationId",
		key_name: "Application ID",
		key_description: "Application ID for Square",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.SQUARE,
		require: true,
		key: "square_locationId",
		key_name: "Location ID",
		key_description: "Location ID for Square",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.SQUARE,
		require: true,
		key: "square_webhookUrl",
		key_name: "Webhook Url",
		key_description: "Webhook Url define in webhook dashboard in Square",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Payment,
		provider: ProviderType.SQUARE,
		require: true,
		key: "square_webhookSignature",
		key_name: "Webhook Signature",
		key_description: "Signature Key of webhook url",
		value: "",
		dataType: "string",
	},
	{
		type: ConfigType.Tracking,
		provider: ProviderType.DUMMY,
		require: true,
		dataType: DataType.Boolean,
		value: "false",
		key: "dummy_showTrackingUrl",
		key_name: "Show Tracking Url",
		key_description: "Show Tracking Url in order detail page",
	},
	{
		type: ConfigType.Tracking,
		provider: ProviderType.DUMMY,
		require: true,
		dataType: DataType.Boolean,
		value: "false",
		key: "dummy_enableTrackingPage",
		key_name: "Enable Tracking Page",
		key_description: "Enable Tracking Page in store",
	},
	{
		type: ConfigType.Tracking,
		provider: ProviderType.DUMMY,
		require: true,
		dataType: DataType.String,
		value: "",
		key: "dummy_contactEmail",
		key_name: "Contact Email",
		key_description: "Contact Email for tracking page",
	},
	{
		type: ConfigType.Tracking,
		provider: ProviderType.DUMMY,
		require: true,
		dataType: DataType.String,
		value: "",
		key: "dummy_contactPhone",
		key_name: "Contact Phone",
		key_description: "Contact Phone for tracking page",
	},
];

export default async (
	container: AwilixContainer,
	config: Record<string, unknown>
) => {
	const logger = container.resolve<Logger>("logger");

	logger.info("Starting system config loader...");

	const sysCfgService = container.resolve<SystemConfigService>(
		"systemConfigService"
	);

	const allCfgs = await sysCfgService.list();

	if (allCfgs.length === defaultConfigs.length) {
		logger.info("System config already loaded");
		return;
	}

	logger.info("Creating default system configs...");
	for (let cfg of defaultConfigs) {
		if (!cfg.key || cfg.key === "") continue;

		await sysCfgService.updateOrCreate(cfg);
	}

	logger.info("ending loader...");
};
